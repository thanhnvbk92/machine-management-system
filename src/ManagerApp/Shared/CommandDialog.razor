@using MachineManagement.ManagerApp.Models
@using MachineManagement.ManagerApp.Services
@inject ICommandService CommandService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="command.MachineId" 
                               Label="Target Machine" 
                               Variant="Variant.Outlined"
                               Required="true">
                        <MudSelectItem Value="@("")">Select Machine</MudSelectItem>
                        @if (Machines != null)
                        {
                            @foreach (var machine in Machines)
                            {
                                <MudSelectItem Value="@machine.MachineId">
                                    @machine.MachineName (@machine.MachineId)
                                    @if (machine.IsOnline)
                                    {
                                        <MudChip Color="Color.Success" Size="Size.Small" Class="ml-2">Online</MudChip>
                                    }
                                    else
                                    {
                                        <MudChip Color="Color.Error" Size="Size.Small" Class="ml-2">Offline</MudChip>
                                    }
                                </MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="command.CommandType" 
                               Label="Command Type" 
                               Variant="Variant.Outlined"
                               Required="true"
                               T="string">
                        <MudSelectItem Value="START">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" Class="mr-2" />
                                Start Operation
                            </div>
                        </MudSelectItem>
                        <MudSelectItem Value="STOP">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Stop" Color="Color.Error" Class="mr-2" />
                                Stop Operation
                            </div>
                        </MudSelectItem>
                        <MudSelectItem Value="PAUSE">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Pause" Color="Color.Warning" Class="mr-2" />
                                Pause Operation
                            </div>
                        </MudSelectItem>
                        <MudSelectItem Value="RESUME">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Info" Class="mr-2" />
                                Resume Operation
                            </div>
                        </MudSelectItem>
                        <MudSelectItem Value="STATUS">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Primary" Class="mr-2" />
                                Status Check
                            </div>
                        </MudSelectItem>
                        <MudSelectItem Value="RESET">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Refresh" Color="Color.Secondary" Class="mr-2" />
                                Reset Machine
                            </div>
                        </MudSelectItem>
                        <MudSelectItem Value="EMERGENCY_STOP">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Class="mr-2" />
                                Emergency Stop
                            </div>
                        </MudSelectItem>
                        <MudSelectItem Value="CUSTOM">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Terminal" Class="mr-2" />
                                Custom Command
                            </div>
                        </MudSelectItem>
                    </MudSelect>
                </MudItem>
                
                @if (command.CommandType == "CUSTOM")
                {
                    <MudItem xs="12">
                        <MudTextField @bind-Value="customCommand" 
                                      Label="Custom Command" 
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      Placeholder="Enter custom command" />
                    </MudItem>
                }
                
                <MudItem xs="12">
                    <MudExpansionPanels Elevation="0">
                        <MudExpansionPanel Text="Advanced Parameters (Optional)">
                            <div class="pa-4">
                                <MudTextField @bind-Value="parametersJson" 
                                              Label="Command Parameters (JSON)" 
                                              Variant="Variant.Outlined"
                                              Lines="5"
                                              Placeholder='{"speed": 100, "duration": 30}' />
                                <MudText Typo="Typo.caption" Class="mt-2">
                                    Enter parameters in JSON format. Leave empty for no parameters.
                                </MudText>
                            </div>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudItem>
                
                <MudItem xs="12">
                    <MudCheckBox @bind-Checked="executeImmediately" 
                                 Label="Execute Immediately"
                                 Color="Color.Primary" />
                    <MudText Typo="Typo.caption" Class="ml-6">
                        If unchecked, the command will be queued for later execution.
                    </MudText>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Text">
            Cancel
        </MudButton>
        <MudButton Color="Color.Primary" 
                   Variant="Variant.Filled" 
                   OnClick="Submit"
                   Disabled="@isSubmitting">
            @if (isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Sending...</MudText>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Send" Class="mr-2" />
                Send Command
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public List<MachineDto>? Machines { get; set; }
    
    private CreateCommandRequest command = new();
    private string customCommand = "";
    private string parametersJson = "{}";
    private bool executeImmediately = true;
    private bool isSubmitting = false;

    protected override void OnInitialized()
    {
        command.CommandType = "START";
    }

    private async Task Submit()
    {
        if (string.IsNullOrWhiteSpace(command.MachineId))
        {
            Snackbar.Add("Please select a target machine", Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(command.CommandType))
        {
            Snackbar.Add("Please select a command type", Severity.Warning);
            return;
        }

        if (command.CommandType == "CUSTOM" && string.IsNullOrWhiteSpace(customCommand))
        {
            Snackbar.Add("Please enter a custom command", Severity.Warning);
            return;
        }

        // Check if target machine is online
        var targetMachine = Machines?.FirstOrDefault(m => m.MachineId == command.MachineId);
        if (targetMachine != null && !targetMachine.IsOnline && command.CommandType != "STATUS")
        {
            var confirmed = await DialogService.ShowMessageBox(
                "Machine Offline",
                $"The target machine '{targetMachine.MachineName}' appears to be offline. Send command anyway?",
                yesText: "Send Anyway",
                cancelText: "Cancel");
            
            if (confirmed != true)
                return;
        }

        try
        {
            isSubmitting = true;
            
            // Use custom command if specified
            var commandType = command.CommandType == "CUSTOM" ? customCommand : command.CommandType;
            
            // Validate JSON parameters
            if (!string.IsNullOrWhiteSpace(parametersJson))
            {
                try
                {
                    System.Text.Json.JsonDocument.Parse(parametersJson);
                }
                catch
                {
                    Snackbar.Add("Invalid JSON format in parameters", Severity.Error);
                    return;
                }
            }
            
            var request = new CreateCommandRequest
            {
                MachineId = command.MachineId,
                CommandType = commandType,
                Parameters = string.IsNullOrWhiteSpace(parametersJson) ? "{}" : parametersJson
            };
            
            var result = await CommandService.CreateCommandAsync(request);
            if (result != null && result.Id > 0)
            {
                Snackbar.Add($"Command '{commandType}' sent to machine '{command.MachineId}'", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add("Failed to send command", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error sending command: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();
    
    [Inject] private IDialogService DialogService { get; set; } = null!;
}