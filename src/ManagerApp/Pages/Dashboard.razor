@page "/"
@using MachineManagement.ManagerApp.Models
@using MachineManagement.ManagerApp.Services
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject IDashboardService DashboardService
@inject IJSRuntime JS
@inject ILogger<Dashboard> Logger

<PageTitle>Dashboard - Machine Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-6">
        <MudIcon Icon="@Icons.Material.Filled.Dashboard" Class="mr-3" />
        Machine Management Dashboard
    </MudText>

    @if (IsLoading)
    {
        <MudContainer Class="d-flex justify-center align-center" Style="height: 50vh">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        </MudContainer>
    }
    else
    {
        <!-- Statistics Cards -->
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <MudCard Class="pa-4" Style="background: linear-gradient(45deg, #1976d2, #42a5f5); color: white;">
                    <MudCardContent>
                        <div class="d-flex justify-space-between align-center">
                            <div>
                                <MudText Typo="Typo.h6">Total Machines</MudText>
                                <MudText Typo="Typo.h3">@Stats.TotalMachines</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.Precision" Size="Size.Large" />
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Class="pa-4" Style="background: linear-gradient(45deg, #388e3c, #66bb6a); color: white;">
                    <MudCardContent>
                        <div class="d-flex justify-space-between align-center">
                            <div>
                                <MudText Typo="Typo.h6">Online</MudText>
                                <MudText Typo="Typo.h3">@Stats.OnlineMachines</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" />
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Class="pa-4" Style="background: linear-gradient(45deg, #f57c00, #ffb74d); color: white;">
                    <MudCardContent>
                        <div class="d-flex justify-space-between align-center">
                            <div>
                                <MudText Typo="Typo.h6">Offline</MudText>
                                <MudText Typo="Typo.h3">@Stats.OfflineMachines</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.Cancel" Size="Size.Large" />
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudCard Class="pa-4" Style="background: linear-gradient(45deg, #d32f2f, #f44336); color: white;">
                    <MudCardContent>
                        <div class="d-flex justify-space-between align-center">
                            <div>
                                <MudText Typo="Typo.h6">Errors Today</MudText>
                                <MudText Typo="Typo.h3">@Stats.TotalErrors</MudText>
                            </div>
                            <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Large" />
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Charts and Activity -->
        <MudGrid Class="mt-6">
            <!-- Machine Status Chart -->
            <MudItem xs="12" md="6">
                <MudCard Class="pa-4" Style="height: 400px;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Filled.PieChart" Class="mr-2" />
                                Machine Status Distribution
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <canvas id="machineStatusChart" width="400" height="300"></canvas>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Activity Log -->
            <MudItem xs="12" md="6">
                <MudCard Class="pa-4" Style="height: 400px;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Filled.Timeline" Class="mr-2" />
                                Recent Activity
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="activity-log" style="max-height: 300px; overflow-y: auto;">
                            @foreach (var error in RecentErrors.Take(10))
                            {
                                <div class="d-flex align-center mb-2">
                                    <MudIcon Icon="@GetLogIcon(error.Level)" Color="@GetLogColor(error.Level)" Class="mr-3" />
                                    <div class="flex-grow-1">
                                        <MudText Typo="Typo.body2">@error.Message</MudText>
                                        <MudText Typo="Typo.caption" Class="text--secondary">
                                            @error.Timestamp.ToString("HH:mm:ss") - @error.MachineId
                                        </MudText>
                                    </div>
                                </div>
                                <MudDivider Class="mb-2" />
                            }
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Recent Updates -->
        <MudGrid Class="mt-6">
            <!-- Recent Machine Updates -->
            <MudItem xs="12" md="6">
                <MudCard Class="pa-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Filled.Update" Class="mr-2" />
                                Recent Machine Updates
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudSimpleTable Dense="true">
                            <thead>
                                <tr>
                                    <th>Machine</th>
                                    <th>Status</th>
                                    <th>Last Update</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var machine in RecentMachineUpdates.Take(5))
                                {
                                    <tr>
                                        <td>@machine.MachineName</td>
                                        <td>
                                            <MudChip Color="@(machine.IsOnline ? Color.Success : Color.Error)" Size="Size.Small">
                                                @(machine.IsOnline ? "Online" : "Offline")
                                            </MudChip>
                                        </td>
                                        <td>@machine.LastHeartbeat?.ToString("HH:mm:ss")</td>
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Recent Commands -->
            <MudItem xs="12" md="6">
                <MudCard Class="pa-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Filled.Terminal" Class="mr-2" />
                                Recent Commands
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudSimpleTable Dense="true">
                            <thead>
                                <tr>
                                    <th>Command</th>
                                    <th>Machine</th>
                                    <th>Status</th>
                                    <th>Time</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var command in RecentCommands.Take(5))
                                {
                                    <tr>
                                        <td>@command.CommandType</td>
                                        <td>@command.MachineId</td>
                                        <td>
                                            <MudChip Color="@GetCommandStatusColor(command.Status)" Size="Size.Small">
                                                @command.Status
                                            </MudChip>
                                        </td>
                                        <td>@command.CreatedAt.ToString("HH:mm:ss")</td>
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private bool IsLoading = true;
    private DashboardStatsDto Stats = new();
    private IList<LogEntryDto> RecentErrors = new List<LogEntryDto>();
    private IList<MachineDto> RecentMachineUpdates = new List<MachineDto>();
    private IList<CommandDto> RecentCommands = new List<CommandDto>();
    private HubConnection? hubConnection;
    private Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await InitializeSignalR();
        StartPeriodicRefresh();
    }

    private async Task LoadData()
    {
        try
        {
            IsLoading = true;
            
            var statsTask = DashboardService.GetStatsAsync();
            var errorsTask = DashboardService.GetRecentErrorsAsync(10);
            var machinesTask = DashboardService.GetRecentMachineUpdatesAsync(5);
            var commandsTask = DashboardService.GetRecentCommandsAsync(5);

            await Task.WhenAll(statsTask, errorsTask, machinesTask, commandsTask);

            Stats = await statsTask;
            RecentErrors = await errorsTask;
            RecentMachineUpdates = await machinesTask;
            RecentCommands = await commandsTask;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading dashboard data");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateChart();
        }
    }

    private async Task UpdateChart()
    {
        try
        {
            await JS.InvokeVoidAsync("updateMachineStatusChart", Stats.OnlineMachines, Stats.OfflineMachines);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating chart");
        }
    }

    private async Task InitializeSignalR()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl("/machinehub")
                .Build();

            hubConnection.On<DashboardStatsDto>("DashboardStats", async (stats) =>
            {
                Stats = stats;
                await InvokeAsync(StateHasChanged);
                await UpdateChart();
            });

            await hubConnection.StartAsync();
            await hubConnection.SendAsync("SubscribeToDashboard");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing SignalR connection");
        }
    }

    private void StartPeriodicRefresh()
    {
        refreshTimer = new Timer(async _ =>
        {
            await LoadData();
        }, null, TimeSpan.Zero, TimeSpan.FromMinutes(5));
    }

    private static string GetLogIcon(string level)
    {
        return level.ToLower() switch
        {
            "error" => Icons.Material.Filled.Error,
            "warning" => Icons.Material.Filled.Warning,
            "information" => Icons.Material.Filled.Info,
            _ => Icons.Material.Filled.Circle
        };
    }

    private static Color GetLogColor(string level)
    {
        return level.ToLower() switch
        {
            "error" => Color.Error,
            "warning" => Color.Warning,
            "information" => Color.Info,
            _ => Color.Default
        };
    }

    private static Color GetCommandStatusColor(string status)
    {
        return status.ToLower() switch
        {
            "completed" => Color.Success,
            "pending" => Color.Warning,
            "failed" => Color.Error,
            _ => Color.Default
        };
    }

    public async ValueTask DisposeAsync()
    {
        refreshTimer?.Dispose();
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}