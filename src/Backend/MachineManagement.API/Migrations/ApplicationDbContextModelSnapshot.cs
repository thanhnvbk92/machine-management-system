// <auto-generated />
using System;
using MachineManagement.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MachineManagement.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MachineManagement.Core.Entities.Buyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("buyers");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.ClientConfig", b =>
                {
                    b.Property<int>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ConfigId"));

                    b.Property<string>("ConfigKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ConfigId");

                    b.HasIndex("MachineId");

                    b.ToTable("client_config");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Command", b =>
                {
                    b.Property<int>("CommandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CommandId"));

                    b.Property<string>("CommandType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExecutedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Parameters")
                        .HasColumnType("longtext");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ProgramName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ResultMessage")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SentTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CommandId");

                    b.HasIndex("MachineId");

                    b.HasIndex("StationId");

                    b.ToTable("commands");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("lines");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.LogData", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Eqpinfo")
                        .HasColumnType("longtext");

                    b.Property<string>("Fid")
                        .HasColumnType("longtext");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("GmesStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Jobfile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LogLevel")
                        .HasColumnType("longtext");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Measure")
                        .HasColumnType("longtext");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("PartNo")
                        .HasColumnType("longtext");

                    b.Property<string>("Pid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Procinfo")
                        .HasColumnType("longtext");

                    b.Property<string>("RawData")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReceivedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Source")
                        .HasColumnType("longtext");

                    b.Property<string>("SpecMax")
                        .HasColumnType("longtext");

                    b.Property<string>("SpecMin")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("StepNg")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Variant")
                        .HasColumnType("longtext");

                    b.HasKey("LogId");

                    b.HasIndex("FileId");

                    b.HasIndex("MachineId");

                    b.HasIndex("ModelId");

                    b.HasIndex("StationId");

                    b.ToTable("log_data");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.LogFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.ToTable("log_file");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppVersion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClientStatus")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GmesName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Ip")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime?>("LastLogTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastSeen")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MacAddress")
                        .HasMaxLength(17)
                        .HasColumnType("varchar(17)");

                    b.Property<int?>("MachineTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProgramName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MachineTypeId");

                    b.HasIndex("StationId");

                    b.ToTable("machines");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.MachineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("machinetypes");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ModelGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ModelGroupId");

                    b.ToTable("models");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.ModelGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("modelgroups");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.ModelProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("CycleTime")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModelGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessOrder")
                        .HasColumnType("int");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ModelGroupId");

                    b.HasIndex("ModelId");

                    b.HasIndex("StationId");

                    b.ToTable("modelprocesses");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("ModelProcessId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("ModelProcessId");

                    b.ToTable("stations");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.ClientConfig", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.Machine", "Machine")
                        .WithMany("ClientConfigs")
                        .HasForeignKey("MachineId");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Command", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.Machine", "Machine")
                        .WithMany("Commands")
                        .HasForeignKey("MachineId");

                    b.HasOne("MachineManagement.Core.Entities.Station", "Station")
                        .WithMany("Commands")
                        .HasForeignKey("StationId");

                    b.Navigation("Machine");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Line", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.LogData", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.LogFile", "LogFile")
                        .WithMany("LogData")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MachineManagement.Core.Entities.Machine", "Machine")
                        .WithMany("LogData")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MachineManagement.Core.Entities.Model", "Model")
                        .WithMany("LogData")
                        .HasForeignKey("ModelId");

                    b.HasOne("MachineManagement.Core.Entities.Station", "Station")
                        .WithMany("LogData")
                        .HasForeignKey("StationId");

                    b.Navigation("LogFile");

                    b.Navigation("Machine");

                    b.Navigation("Model");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.LogFile", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.Machine", null)
                        .WithMany("LogFiles")
                        .HasForeignKey("MachineId");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Machine", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.MachineType", "MachineType")
                        .WithMany("Machines")
                        .HasForeignKey("MachineTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MachineManagement.Core.Entities.Station", "Station")
                        .WithMany("Machines")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MachineType");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Model", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.ModelGroup", "ModelGroup")
                        .WithMany("Models")
                        .HasForeignKey("ModelGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelGroup");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.ModelGroup", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.Buyer", "Buyer")
                        .WithMany("ModelGroups")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.ModelProcess", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.ModelGroup", null)
                        .WithMany("ModelProcesses")
                        .HasForeignKey("ModelGroupId");

                    b.HasOne("MachineManagement.Core.Entities.Model", "Model")
                        .WithMany("ModelProcesses")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MachineManagement.Core.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Station", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.Line", "Line")
                        .WithMany("Stations")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MachineManagement.Core.Entities.ModelProcess", "ModelProcess")
                        .WithMany()
                        .HasForeignKey("ModelProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("ModelProcess");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Buyer", b =>
                {
                    b.Navigation("ModelGroups");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Line", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.LogFile", b =>
                {
                    b.Navigation("LogData");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Machine", b =>
                {
                    b.Navigation("ClientConfigs");

                    b.Navigation("Commands");

                    b.Navigation("LogData");

                    b.Navigation("LogFiles");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.MachineType", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Model", b =>
                {
                    b.Navigation("LogData");

                    b.Navigation("ModelProcesses");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.ModelGroup", b =>
                {
                    b.Navigation("ModelProcesses");

                    b.Navigation("Models");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Station", b =>
                {
                    b.Navigation("Commands");

                    b.Navigation("LogData");

                    b.Navigation("Machines");
                });
#pragma warning restore 612, 618
        }
    }
}
