// <auto-generated />
using System;
using MachineManagement.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MachineManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250929005655_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MachineManagement.Core.Entities.Buyer", b =>
                {
                    b.Property<int>("BuyerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BuyerId"));

                    b.Property<string>("BuyerCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BuyerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("BuyerId");

                    b.ToTable("BUYERS");

                    b.HasData(
                        new
                        {
                            BuyerId = 1,
                            BuyerCode = "BMW",
                            BuyerName = "BMW",
                            CreatedAt = new DateTime(2025, 9, 29, 0, 56, 55, 162, DateTimeKind.Utc).AddTicks(3798),
                            Description = "BMW Group",
                            IsActive = true
                        },
                        new
                        {
                            BuyerId = 2,
                            BuyerCode = "AUDI",
                            BuyerName = "Audi",
                            CreatedAt = new DateTime(2025, 9, 29, 0, 56, 55, 162, DateTimeKind.Utc).AddTicks(3803),
                            Description = "Audi AG",
                            IsActive = true
                        },
                        new
                        {
                            BuyerId = 3,
                            BuyerCode = "VW",
                            BuyerName = "Volkswagen",
                            CreatedAt = new DateTime(2025, 9, 29, 0, 56, 55, 162, DateTimeKind.Utc).AddTicks(3805),
                            Description = "Volkswagen Group",
                            IsActive = true
                        },
                        new
                        {
                            BuyerId = 4,
                            BuyerCode = "MB",
                            BuyerName = "Mercedes-Benz",
                            CreatedAt = new DateTime(2025, 9, 29, 0, 56, 55, 162, DateTimeKind.Utc).AddTicks(3807),
                            Description = "Mercedes-Benz Group",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.ClientConfig", b =>
                {
                    b.Property<int>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ConfigId"));

                    b.Property<string>("ConfigKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConfigValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DataType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ConfigId");

                    b.HasIndex("MachineId");

                    b.ToTable("CLIENT_CONFIGS");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Command", b =>
                {
                    b.Property<int>("CommandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CommandId"));

                    b.Property<string>("CommandData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CommandType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CommandId");

                    b.HasIndex("MachineId", "Status");

                    b.ToTable("COMMANDS");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Line", b =>
                {
                    b.Property<int>("LineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LineId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LineCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ModelProcessId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("LineId");

                    b.HasIndex("ModelProcessId");

                    b.ToTable("LINES");

                    b.HasData(
                        new
                        {
                            LineId = 1,
                            CreatedAt = new DateTime(2025, 9, 29, 0, 56, 55, 162, DateTimeKind.Utc).AddTicks(4264),
                            IsActive = true,
                            LineCode = "ASM_L1",
                            LineName = "Assembly Line 1",
                            ModelProcessId = 1
                        },
                        new
                        {
                            LineId = 2,
                            CreatedAt = new DateTime(2025, 9, 29, 0, 56, 55, 162, DateTimeKind.Utc).AddTicks(4267),
                            IsActive = true,
                            LineCode = "PNT_L1",
                            LineName = "Paint Line 1",
                            ModelProcessId = 2
                        });
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.LogData", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("LogId"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Details")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("LogTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LogType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("LogId");

                    b.HasIndex("MachineId", "LogTimestamp");

                    b.ToTable("LOGDATA");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MachineId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MachineCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MachineType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MachineId");

                    b.HasIndex("MachineCode")
                        .IsUnique();

                    b.HasIndex("StationId");

                    b.ToTable("MACHINES");

                    b.HasData(
                        new
                        {
                            MachineId = 1,
                            CreatedAt = new DateTime(2025, 9, 29, 0, 56, 55, 162, DateTimeKind.Utc).AddTicks(4413),
                            Description = "Primary welding robot",
                            IsActive = true,
                            MachineCode = "WLD_R001",
                            MachineName = "Welding Robot 1",
                            MachineType = "Robot",
                            StationId = 1
                        },
                        new
                        {
                            MachineId = 2,
                            CreatedAt = new DateTime(2025, 9, 29, 0, 56, 55, 162, DateTimeKind.Utc).AddTicks(4418),
                            Description = "Automated paint sprayer",
                            IsActive = true,
                            MachineCode = "PNT_S001",
                            MachineName = "Paint Sprayer 1",
                            MachineType = "Sprayer",
                            StationId = 2
                        });
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ModelId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ModelCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ModelGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ModelId");

                    b.HasIndex("ModelGroupId");

                    b.ToTable("MODELS");

                    b.HasData(
                        new
                        {
                            ModelId = 1,
                            CreatedAt = new DateTime(2025, 9, 29, 0, 56, 55, 162, DateTimeKind.Utc).AddTicks(4091),
                            IsActive = true,
                            ModelCode = "BMW_320I",
                            ModelGroupId = 1,
                            ModelName = "BMW 320i"
                        },
                        new
                        {
                            ModelId = 2,
                            CreatedAt = new DateTime(2025, 9, 29, 0, 56, 55, 162, DateTimeKind.Utc).AddTicks(4111),
                            IsActive = true,
                            ModelCode = "A4_20T",
                            ModelGroupId = 2,
                            ModelName = "Audi A4 2.0T"
                        });
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.ModelGroup", b =>
                {
                    b.Property<int>("ModelGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ModelGroupId"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ModelGroupId");

                    b.HasIndex("BuyerId");

                    b.ToTable("MODELGROUPS");

                    b.HasData(
                        new
                        {
                            ModelGroupId = 1,
                            BuyerId = 1,
                            CreatedAt = new DateTime(2025, 9, 29, 0, 56, 55, 162, DateTimeKind.Utc).AddTicks(4028),
                            GroupCode = "BMW_3",
                            GroupName = "3 Series",
                            IsActive = true
                        },
                        new
                        {
                            ModelGroupId = 2,
                            BuyerId = 2,
                            CreatedAt = new DateTime(2025, 9, 29, 0, 56, 55, 162, DateTimeKind.Utc).AddTicks(4032),
                            GroupCode = "AUDI_A4",
                            GroupName = "A4",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.ModelProcess", b =>
                {
                    b.Property<int>("ModelProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ModelProcessId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ModelProcessId");

                    b.HasIndex("ModelId");

                    b.ToTable("MODELPROCESSES");

                    b.HasData(
                        new
                        {
                            ModelProcessId = 1,
                            CreatedAt = new DateTime(2025, 9, 29, 0, 56, 55, 162, DateTimeKind.Utc).AddTicks(4189),
                            IsActive = true,
                            ModelId = 1,
                            ProcessCode = "ASM",
                            ProcessName = "Assembly"
                        },
                        new
                        {
                            ModelProcessId = 2,
                            CreatedAt = new DateTime(2025, 9, 29, 0, 56, 55, 162, DateTimeKind.Utc).AddTicks(4200),
                            IsActive = true,
                            ModelId = 1,
                            ProcessCode = "PNT",
                            ProcessName = "Paint"
                        });
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Station", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("StationId");

                    b.HasIndex("LineId");

                    b.ToTable("STATIONS");

                    b.HasData(
                        new
                        {
                            StationId = 1,
                            CreatedAt = new DateTime(2025, 9, 29, 0, 56, 55, 162, DateTimeKind.Utc).AddTicks(4343),
                            IsActive = true,
                            LineId = 1,
                            StationCode = "WLD_S1",
                            StationName = "Welding Station"
                        },
                        new
                        {
                            StationId = 2,
                            CreatedAt = new DateTime(2025, 9, 29, 0, 56, 55, 162, DateTimeKind.Utc).AddTicks(4359),
                            IsActive = true,
                            LineId = 2,
                            StationCode = "PNT_B1",
                            StationName = "Paint Booth"
                        });
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.ClientConfig", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Command", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.Machine", "Machine")
                        .WithMany("Commands")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Line", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.ModelProcess", "ModelProcess")
                        .WithMany("Lines")
                        .HasForeignKey("ModelProcessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ModelProcess");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.LogData", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.Machine", "Machine")
                        .WithMany("LogData")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Machine", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.Station", "Station")
                        .WithMany("Machines")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Model", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.ModelGroup", "ModelGroup")
                        .WithMany("Models")
                        .HasForeignKey("ModelGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ModelGroup");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.ModelGroup", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.Buyer", "Buyer")
                        .WithMany("ModelGroups")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.ModelProcess", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.Model", "Model")
                        .WithMany("ModelProcesses")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Station", b =>
                {
                    b.HasOne("MachineManagement.Core.Entities.Line", "Line")
                        .WithMany("Stations")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Buyer", b =>
                {
                    b.Navigation("ModelGroups");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Line", b =>
                {
                    b.Navigation("Stations");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Machine", b =>
                {
                    b.Navigation("Commands");

                    b.Navigation("LogData");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Model", b =>
                {
                    b.Navigation("ModelProcesses");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.ModelGroup", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.ModelProcess", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("MachineManagement.Core.Entities.Station", b =>
                {
                    b.Navigation("Machines");
                });
#pragma warning restore 612, 618
        }
    }
}
