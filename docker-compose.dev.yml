version: '3.8'

services:
  # MySQL Database
  database:
    image: mysql:8.0
    container_name: machine-management-db
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-admin123}
      MYSQL_DATABASE: ${DB_NAME:-machine_management_db}
      MYSQL_USER: ${DB_USER:-appuser}
      MYSQL_PASSWORD: ${DB_PASSWORD:-userpass123}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - machine-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-admin123}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Backend API (when implemented)
  backend-api:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: machine-management-api
    depends_on:
      database:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Server=database;Database=${DB_NAME:-machine_management_db};Uid=${DB_USER:-appuser};Pwd=${DB_PASSWORD:-userpass123};Port=3306;CharSet=utf8mb4;
    ports:
      - "${API_PORT:-5000}:8080"
    volumes:
      - ./logs/api:/app/logs
    networks:
      - machine-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - api  # Only start when 'api' profile is specified

  # Manager Web App (when implemented)
  manager-web:
    build:
      context: .
      dockerfile: Dockerfile.manager
    container_name: machine-management-manager
    depends_on:
      - backend-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ApiSettings__BaseUrl=http://backend-api:8080
    ports:
      - "${MANAGER_PORT:-5001}:8080"
    volumes:
      - ./logs/manager:/app/logs
    networks:
      - machine-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - manager  # Only start when 'manager' profile is specified

  # Redis for caching and SignalR backplane (optional)
  redis:
    image: redis:7-alpine
    container_name: machine-management-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispass123}
    volumes:
      - redis_data:/data
    networks:
      - machine-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - cache  # Only start when 'cache' profile is specified

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: machine-management-adminer
    depends_on:
      - database
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: database
    networks:
      - machine-network
    profiles:
      - tools  # Only start when 'tools' profile is specified

  # Portainer for container management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: machine-management-portainer
    command: -H unix:///var/run/docker.sock
    ports:
      - "${PORTAINER_PORT:-9000}:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - machine-network
    profiles:
      - tools  # Only start when 'tools' profile is specified

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  portainer_data:
    driver: local

networks:
  machine-network:
    driver: bridge
    name: machine-management-network