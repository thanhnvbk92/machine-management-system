version: '3.8'

services:
  # Load Balancer (nginx)
  nginx:
    image: nginx:alpine
    container_name: machine-management-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend-api
      - manager-web
    networks:
      - machine-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # MySQL Database with replication
  database:
    image: mysql:8.0
    container_name: machine-management-db
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      MYSQL_DATABASE: ${DB_NAME:-machine_management_db}
      MYSQL_USER: ${DB_USER:-appuser}
      MYSQL_PASSWORD_FILE: /run/secrets/db_user_password
    ports:
      - "127.0.0.1:3306:3306"  # Only bind to localhost for security
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/production:/docker-entrypoint-initdb.d:ro
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
    secrets:
      - db_root_password
      - db_user_password
    networks:
      - machine-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$(cat /run/secrets/db_root_password)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Backend API (Multiple instances)
  backend-api:
    image: machine-management/backend:${VERSION:-latest}
    deploy:
      replicas: 3
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection_FILE=/run/secrets/connection_string
    secrets:
      - connection_string
    volumes:
      - ./logs/api:/app/logs
    networks:
      - machine-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 30s
        failure_action: pause
        order: stop-first

  # Manager Web App (Multiple instances)
  manager-web:
    image: machine-management/manager:${VERSION:-latest}
    deploy:
      replicas: 2
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ApiSettings__BaseUrl=http://backend-api:8080
    secrets:
      - connection_string
    volumes:
      - ./logs/manager:/app/logs
    networks:
      - machine-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first

  # Redis for caching and SignalR backplane
  redis:
    image: redis:7-alpine
    container_name: machine-management-redis
    command: >
      redis-server
      --requirepass $$(cat /run/secrets/redis_password)
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
    networks:
      - machine-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: machine-management-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - machine-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: machine-management-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    secrets:
      - grafana_admin_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - machine-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: machine-management-loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - machine-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Backup service
  backup:
    image: mysql:8.0
    container_name: machine-management-backup
    depends_on:
      - database
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    secrets:
      - db_root_password
    command: >
      sh -c "
        echo 'Setting up backup cron job...'
        echo '${BACKUP_SCHEDULE:-0 2 * * *} /backup.sh' | crontab -
        echo 'Backup service started'
        crond -f -l 2
      "
    networks:
      - machine-network
    restart: unless-stopped
    profiles:
      - backup

# Production secrets
secrets:
  db_root_password:
    external: true
  db_user_password:
    external: true
  connection_string:
    external: true
  redis_password:
    external: true
  grafana_admin_password:
    external: true

volumes:
  mysql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/machine-management/data/mysql
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  machine-network:
    driver: bridge
    name: machine-management-production